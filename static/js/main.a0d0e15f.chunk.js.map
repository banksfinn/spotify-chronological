{"version":3,"sources":["SpotifyComponents.js","App.js","serviceWorker.js","index.js"],"names":["formQuery","type","auth","url","query","a","pre_request","method","headers","q_response","fetch","then","response","json","responseData","getSongsFromAlbum","album_id","date","songs","items","i","item","push","getTracks","tracks","length","toString","dateToString","str","split","join","parseInt","removeDuplicateSongs","data","remixes","new_data","repeats","num_remixes","song","toLowerCase","includes","console","log","SimpleSnackbar","React","useState","open","setOpen","handleClose","event","reason","Button","onClick","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","action","Fragment","color","size","IconButton","aria-label","fontSize","createSingleList","key","string","withStyles","theme","tooltip","backgroundColor","palette","common","white","boxShadow","shadows","Tooltip","SpotifyAPI","props","access_token","artist","state","copy_value","count","albums_incl","singles_incl","appears_on","compilation","handleInputChange","bind","id","this","get_access","albums","new_albums","concat","num_albums","max_album_size","process","j","new_tracks","sort","first","second","setState","handleClick","encodeURIComponent","trim","artists","artist_id","get_tracks","body","resp","target","value","selected","name","Form","Group","controlId","TextField","label","onChange","document","getElementById","helperText","Check","checked","ToggleButton","variant","get_artist","text","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a0d0e15f.chunk.js","sourcesContent":["import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport TextField from '@material-ui/core/TextField';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nasync function formQuery(type, auth, url, query) {\n    const pre_request = {\n        method: type,\n        headers: {'Authorization': 'Bearer ' + auth, 'Content-Type': 'application/json', 'Accept': 'application/json'}\n    };\n    let q_response = \"\";\n    await fetch(url + query, pre_request).then((response) => response.json()).then((responseData) => q_response=responseData);\n    return q_response;\n}\n\nasync function getSongsFromAlbum(album_id, date, auth) {\n    let songs = [];\n    let items = await formQuery(\"GET\", auth, 'https://api.spotify.com/v1/albums/' + album_id + \"/tracks\", \"\");\n\n    let i = 0;\n    for (let item of items['items']) {\n        songs.push({'uri': item['uri'], 'name': item['name'], 'date': date, 'order': i});\n        i += 1;\n    }\n    return songs;\n}\n\nasync function getTracks(type, auth, url, query) {\n    const pre_request = {\n        method: type,\n        headers: {'Authorization': 'Bearer ' + auth, 'Content-Type': 'application/json'}\n    };\n    let q_response = \"\";\n    await fetch(url + query, pre_request).then((response) => response.json()).then((responseData) => q_response=responseData['items']);\n    let tracks = [];\n    for (let i = 0; i < q_response.length; i++) {\n        tracks.push({'id': q_response[i.toString()]['id'], 'date': q_response[i.toString()]['release_date']});\n    }\n    return tracks;\n}\n\nfunction dateToString(str) {\n    str = str.split(\"-\");\n    str = str.join();\n    return parseInt(str, 10);\n}\n\nfunction removeDuplicateSongs(data, remixes) {\n    let new_data = [];\n    let repeats = 0;\n    let num_remixes = 0;\n    let songs = {};\n    if (remixes) {\n        for (let song of data) {\n            if (song['name'] in songs) {\n                repeats += 1;\n            } else {\n                new_data.push(song);\n                songs[song['name']] = 1\n            }\n        }\n    } else {\n        for (let song of data) {\n            if (song['name'] in songs) {\n                repeats += 1;\n            } else {\n                if (song['name'].toLowerCase().includes('remix')) {\n                     num_remixes += 1;\n                } else {\n                    new_data.push(song);\n                    songs[song['name']] = 1\n                }\n            }\n        }\n    }\n    console.log('There been ' + repeats + ' songs removed after trimming, ' + num_remixes + ' remixes removed.');\n    return new_data\n}\n\nexport default function SimpleSnackbar() {\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => {\n        setOpen(true);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <Button onClick={handleClick}>Open simple snackbar</Button>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={open}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                message=\"Note archived\"\n                action={\n                    <React.Fragment>\n                        <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n                            UNDO\n                        </Button>\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n                            <CloseIcon fontSize=\"small\" />\n                        </IconButton>\n                    </React.Fragment>\n                }\n            />\n        </div>\n    );\n}\n\nfunction createSingleList(data, key) {\n    let string = \"\";\n    for (let track of data) {\n        string += track[key];\n        string += \"\\n\";\n    }\n    return string;\n}\n\nconst LightTooltip = withStyles(theme => ({\n    tooltip: {\n        backgroundColor: theme.palette.common.white,\n        color: 'rgba(0, 0, 0, 0.87)',\n        boxShadow: theme.shadows[1],\n        fontSize: 11,\n    },\n}))(Tooltip);\n\nexport class SpotifyAPI extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.access_token = \"\";\n        this.artist = \"\";\n        this.state = {\n            message: 'Default content',\n            copy_value: '',\n            count: \"There are 0 songs (so far)\",\n            albums_incl: false,\n            singles_incl: false,\n            appears_on: false,\n            compilation: false,\n            remixes: false,\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    async get_tracks(id) {\n        if (this.access_token === \"\")\n            await this.get_access();\n\n        let i = 0;\n        let albums = [];\n\n        // We want to separate these, as Spotify currently has a bug of returning too many things while everything\n        // is selected in included_group\n        if (this.state.albums_incl) {\n            do  {\n                let new_albums = await getTracks(\"GET\", this.access_token, \"https://api.spotify.com/v1/artists/\" + id + \"/albums\", \"?offset=\" + i + \"&limit=50&include_groups=album&market=US\");\n                albums = albums.concat(new_albums);\n                i += 1;\n            } while (albums.length / (i + 1) === 50)\n        }\n        let num_albums = albums.length;\n        if (this.state.singles_incl) {\n            i = 0;\n            do  {\n                let new_albums = await getTracks(\"GET\", this.access_token, \"https://api.spotify.com/v1/artists/\" + id + \"/albums\", \"?offset=\" + i + \"&limit=50&include_groups=single&market=US\");\n                albums = albums.concat(new_albums);\n                i += 1;\n            } while ((albums.length - num_albums) / (i + 1) === 50)\n        }\n        num_albums = albums.length;\n        if (this.state.appears_on) {\n            i = 0;\n            do  {\n                let new_albums = await getTracks(\"GET\", this.access_token, \"https://api.spotify.com/v1/artists/\" + id + \"/albums\", \"?offset=\" + i + \"&limit=50&include_groups=appears_on&market=US\");\n                albums = albums.concat(new_albums);\n                i += 1;\n            } while ((albums.length - num_albums) / (i + 1) === 50)\n        }\n        num_albums = albums.length;\n        if (this.state.compilation) {\n            i = 0;\n            do  {\n                let new_albums = await getTracks(\"GET\", this.access_token, \"https://api.spotify.com/v1/artists/\" + id + \"/albums\", \"?offset=\" + i + \"&limit=50&include_groups=compilation&market=US\");\n                albums = albums.concat(new_albums);\n                i += 1;\n            } while ((albums.length - num_albums) / (i + 1) === 50)\n        }\n\n\n        let tracks = [];\n        // Probably not necessary, but better to be safe\n        let max_album_size = albums.length > process.env.REACT_APP_MAX_ALBUMS ? process.env.REACT_APP_MAX_ALBUMS : albums.length;\n\n        // Every song has an album, but we don't know how many songs per album\n        for (let j = 0; j < max_album_size; j++) {\n            let new_tracks = await getSongsFromAlbum(albums[j]['id'], albums[j]['date'], this.access_token);\n            tracks = tracks.concat(new_tracks)\n        }\n\n        // Just remove duplicates as best as possible\n        tracks = removeDuplicateSongs(tracks, this.state.remixes);\n\n        // Sort by date (the whole point), as well as by album order\n        tracks.sort(function(first, second) {\n            return  (dateToString(first['date']) + (first['order'] * 0.01)) - (dateToString(second['date']) + (second['order'] * 0.01));\n        });\n\n        // Display it, and put it on the copy paste button.\n        this.setState({count: \"There are \" + tracks.length + \" songs.\"});\n        this.setState({copy_value: createSingleList(tracks, 'uri')});\n        this.setState({message: createSingleList(tracks, 'name')});\n        let a = SimpleSnackbar();\n        a.handleClick();\n    }\n\n    async get_artist(artist) {\n        if (this.access_token === \"\")\n            await this.get_access();\n        artist = encodeURIComponent(artist.trim());\n        let artists = await formQuery(\"GET\", this.access_token, \"https://api.spotify.com/v1/search\", \"?q=\" + artist + \"&type=artist\");\n        let artist_id = artists['artists']['items'][0]['id'];\n        this.get_tracks(artist_id)\n    }\n\n    async get_access() {\n        let auth = 'Basic ' + process.env.REACT_APP_AUTH + '=';\n        const pre_request = {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': auth,\n            }\n        };\n        pre_request.body = \"grant_type=client_credentials\";\n        let access_token = \"\";\n        await fetch('https://accounts.spotify.com/api/token',\n            pre_request).then((response) => response.json()).then((responseData) => {access_token=responseData['access_token']});\n        this.access_token = access_token;\n    }\n\n    async get_song() {\n        if (this.access_token === \"\")\n            await this.get_access();\n        let resp = await formQuery('GET', this.access_token, 'https://api.spotify.com/v1/search', '?q=illenium&type=artist');\n        this.setState({message: resp})\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.selected : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div>{ this.state.count } </div>\n                <Form>\n                    <Form.Group controlId=\"formArtistName\">\n                        <TextField id=\"artist_id\" label=\"Artist Name\"\n                                   onChange={()=>{this.artist = document.getElementById('artist_id').value}}\n                                    helperText=\"We currently select the top artist available with that name.\"/>\n                    </Form.Group>\n                    <Form.Group controlId=\"albums_included\">\n                        <Form.Check type=\"checkbox\" label=\"Include albums\"\n                                    name=\"albums_incl\"\n                                    checked={this.state.albums_incl}\n                                    onChange={this.handleInputChange}/>\n                        <ToggleButton\n                            value=\"check\"\n                            name=\"albums_incl\"\n                            type=\"checkbox\"\n                            selected={this.state.albums_incl}\n                            onChange={this.handleInputChange}\n                        >Albums</ToggleButton>\n\n                    </Form.Group>\n                    <Form.Group controlId=\"singles_included\">\n                        <Form.Check type=\"checkbox\" label=\"Include singles\"\n                                    name=\"singles_incl\"\n                                    checked={this.state.singles_incl}\n                                    onChange={this.handleInputChange}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"appears_on_included\">\n                        <Form.Check type=\"checkbox\" label=\"Include songs they appear on\"\n                                    name=\"appears_on\"\n                                    checked={this.state.appears_on}\n                                    onChange={this.handleInputChange}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"compilations_included\">\n                        <Form.Check type=\"checkbox\" label=\"Include compilations\"\n                                    checked={this.state.compilation}\n                                    name=\"compilation\"\n                                    onChange={this.handleInputChange}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"include_remixes\">\n                        <Form.Check type=\"checkbox\" label=\"Include remixes\"\n                                    name=\"remixes\"\n                                    checked={this.state.remixes}\n                                    onChange={this.handleInputChange}/>\n                    </Form.Group>\n                    <Button variant=\"primary\" onClick={()=> this.get_artist(this.artist)}>\n                        Submit\n                    </Button>\n                </Form>\n                <CopyToClipboard text={this.state.copy_value}>\n                    <button>Copy to clipboard with button, paste into a new album!</button>\n                </CopyToClipboard>\n                <div>{ this.state.message } </div>\n            </div>\n        )\n    }\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport { SpotifyAPI } from './SpotifyComponents'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n      <div>\n        <SpotifyAPI>temp</SpotifyAPI>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}