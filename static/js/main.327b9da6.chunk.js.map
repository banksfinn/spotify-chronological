{"version":3,"sources":["SpotifyComponents.js","App.js","serviceWorker.js","index.js"],"names":["formQuery","type","auth","url","query","a","console","log","pre_request","q_response","fetch","then","response","SpotifyAPI","props","access_token","state","message","method","headers","body","json","responseData","this","resp","setState","Button","style","margin","onClick","get_access","Content","get_song","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"uWAGeA,E,oFAAf,WAAyBC,EAAMC,EAAMC,EAAKC,GAA1C,iBAAAC,EAAA,6DACIC,QAAQC,IAAIL,GACNM,EAAc,CAChB,OAAUP,EACV,cAAiB,UAAYC,GAE7BO,EAAa,GANrB,SAOUC,MAAMP,EAAMC,EAAOI,GAAaG,MAAK,SAACC,GAAD,OAAcH,EAAWG,KAPxE,gCASWH,GATX,4C,sBAYO,IAAMI,EAAb,YAEI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,aAAe,GACpB,EAAKC,MAAQ,CACTC,QAAS,mBAJE,EAFvB,kMAWmB,kGACLT,EAAc,CAChBU,OAAQ,OACRC,QAAS,CACL,eAAgB,oCAChB,cALG,oGAQCC,KAAO,gCACfL,EAAe,GApB3B,SAqBcL,MAAM,yCAA0CF,GAAaG,MAAK,SAACC,GAAD,OAAcA,EAASS,UAAQV,MAAK,SAACW,GAAkBP,EAAaO,EAAY,gBArBhK,OAsBQC,KAAKR,aAAeA,EAtB5B,uQA4ByBf,EAAU,MAAOuB,KAAKR,aAAc,oCAAqC,2BA5BlG,OA4BYS,EA5BZ,OA6BQlB,QAAQC,IAAIiB,GACZD,KAAKE,SAAS,CAACR,QAASO,IA9BhC,qIAiCc,IAAD,OACL,OACI,6BACA,kBAACE,EAAA,EAAD,CAAQC,MAAO,CAACC,OAAQ,iBAAkBC,QAAS,WAC/C,EAAKC,eAEL,kBAACJ,EAAA,EAAOK,QAAR,sBAEA,kBAACL,EAAA,EAAD,CAAQC,MAAO,CAACC,OAAQ,iBAAkBC,QAAS,WAC/C,EAAKG,aAEL,kBAACN,EAAA,EAAOK,QAAR,sBAEJ,6BAAOR,KAAKP,MAAMC,QAAlB,UA9ChB,GAAgCgB,IAAMC,WCHvBC,MARf,WACE,OACI,6BACE,kBAAC,EAAD,eCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMlC,c","file":"static/js/main.327b9da6.chunk.js","sourcesContent":["import React from 'react';\nimport {Button} from 'semantic-ui-react';\n\nasync function formQuery(type, auth, url, query) {\n    console.log(auth);\n    const pre_request = {\n        'method': type,\n        'Authorization': 'Bearer ' + auth,\n    };\n    let q_response = \"\";\n    await fetch(url + query, pre_request).then((response) => q_response=response);\n\n    return q_response;\n}\n\nexport class SpotifyAPI extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.access_token = \"\";\n        this.state = {\n            message: 'Default content'\n        }\n    }\n\n    async get_access() {\n        let auth = 'Basic ' + process.env.REACT_APP_AUTH + '=';\n        const pre_request = {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': auth,\n            }\n        };\n        pre_request.body = \"grant_type=client_credentials\";\n        let access_token = \"\";\n        await fetch('https://accounts.spotify.com/api/token', pre_request).then((response) => response.json()).then((responseData) => {access_token=responseData['access_token']});\n        this.access_token = access_token;\n    }\n\n\n\n    async get_song() {\n        let resp = await formQuery('GET', this.access_token, 'https://api.spotify.com/v1/search', '?q=illenium&type=artist');\n        console.log(resp);\n        this.setState({message: resp})\n    }\n\n    render() {\n        return (\n            <div>\n            <Button style={{margin: '2% 10% 2% 10%'}} onClick={() => {\n                this.get_access()\n            }}>\n                <Button.Content>Send Request</Button.Content>\n            </Button>\n                <Button style={{margin: '2% 10% 2% 10%'}} onClick={() => {\n                    this.get_song()\n                }}>\n                    <Button.Content>Send Request</Button.Content>\n                </Button>\n                <div>{ this.state.message } </div>\n            </div>\n        )\n    }\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport { SpotifyAPI } from './SpotifyComponents'\n\nfunction App() {\n  return (\n      <div>\n        <SpotifyAPI>temp</SpotifyAPI>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}