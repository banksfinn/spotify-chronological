{"version":3,"sources":["SpotifyComponents.js","App.js","serviceWorker.js","index.js"],"names":["formQuery","type","auth","url","query","a","pre_request","method","headers","q_response","fetch","then","response","json","responseData","getSongsFromAlbum","album_id","date","songs","items","i","item","push","getTracks","tracks","length","toString","removeDuplicateSongs","data","remixes","new_data","repeats","num_remixes","song","toLowerCase","includes","console","log","createSingleList","key","string","SpotifyAPI","props","access_token","artist","state","message","copy_value","count","albums_incl","singles_incl","appears_on","compilation","handleInputChange","bind","id","this","get_access","criteria","slice","albums","new_albums","concat","j","new_tracks","sort","first","second","setState","encodeURIComponent","trim","artists","artist_id","get_tracks","body","resp","event","target","value","checked","name","Form","Group","controlId","Label","Control","onChange","document","getElementById","placeholder","Text","className","Check","label","Button","variant","onClick","get_artist","text","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5e0740d1.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nasync function formQuery(type, auth, url, query) {\n    const pre_request = {\n        method: type,\n        headers: {'Authorization': 'Bearer ' + auth, 'Content-Type': 'application/json', 'Accept': 'application/json'}\n    };\n    let q_response = \"\";\n    await fetch(url + query, pre_request).then((response) => response.json()).then((responseData) => q_response=responseData);\n    return q_response;\n}\n\nasync function getSongsFromAlbum(album_id, date, auth) {\n    let songs = [];\n    let items = await formQuery(\"GET\", auth, 'https://api.spotify.com/v1/albums/' + album_id + \"/tracks\", \"\");\n\n    let i = 0;\n    for (let item of items['items']) {\n        songs.push({'uri': item['uri'], 'name': item['name'], 'date': date, 'order': i});\n        i += 1;\n    }\n    return songs;\n}\n\nasync function getTracks(type, auth, url, query) {\n    const pre_request = {\n        method: type,\n        headers: {'Authorization': 'Bearer ' + auth, 'Content-Type': 'application/json'}\n    };\n    let q_response = \"\";\n    await fetch(url + query, pre_request).then((response) => response.json()).then((responseData) => q_response=responseData['items']);\n    let tracks = [];\n    for (let i = 0; i < q_response.length; i++) {\n        tracks.push({'id': q_response[i.toString()]['id'], 'date': q_response[i.toString()]['release_date']});\n    }\n    return tracks;\n}\n\nfunction removeDuplicateSongs(data, remixes) {\n    let new_data = [];\n    let repeats = 0;\n    let num_remixes = 0;\n    let songs = {};\n    if (remixes) {\n        for (let song of data) {\n            if (song['name'] in songs) {\n                repeats += 1;\n            } else {\n                new_data.push(song);\n                songs[song['name']] = 1\n            }\n        }\n    } else {\n        for (let song of data) {\n            if (song['name'] in songs) {\n                repeats += 1;\n            } else {\n                if (song['name'].toLowerCase().includes('remix')) {\n                     num_remixes += 1;\n                } else {\n                    new_data.push(song);\n                    songs[song['name']] = 1\n                }\n            }\n        }\n    }\n    console.log('There been ' + repeats + ' songs removed after trimming, ' + num_remixes + ' remixes removed.');\n    return new_data\n}\n\nfunction createSingleList(data, key) {\n    let string = \"\";\n    for (let track of data) {\n        string += track[key];\n        string += \"\\n\";\n    }\n    return string;\n}\n\nexport class SpotifyAPI extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.access_token = \"\";\n        this.artist = \"\";\n        this.state = {\n            message: 'Default content',\n            copy_value: '',\n            count: \"There are 0 songs (so far)\",\n            albums_incl: false,\n            singles_incl: false,\n            appears_on: false,\n            compilation: false,\n            remixes: false,\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    async get_tracks(id) {\n        if (this.access_token === \"\")\n            await this.get_access();\n        let i = 0;\n        let criteria = 'include_groups=';\n        criteria += this.state.albums_incl ? \"album,\" : \"\";\n        criteria += this.state.singles_incl ? \"single,\" : \"\";\n        criteria += this.state.appears_on ? \"appears_on,\" : \"\";\n        criteria += this.state.compilation ? \"compilation,\" : \"\";\n        criteria = criteria.slice(0, -1);\n        let albums = await getTracks(\"GET\",\n            this.access_token, \"https://api.spotify.com/v1/artists/\" + id + \"/albums\",\n            \"?offset=0&limit=50&\" + criteria + \"&market=US\");\n        while (albums.length / (i + 1) === 50) {\n            let new_albums = await getTracks(\"GET\", this.access_token, \"https://api.spotify.com/v1/artists/\" + id + \"/albums\", \"?offset=\" + i + \"&limit=50&\" + criteria + \"&market=US\");\n            albums = albums.concat(new_albums);\n            i += 1;\n        }\n        let tracks = [];\n        for (let j = 0; j < albums.length; j++) {\n            let new_tracks = await getSongsFromAlbum(albums[j]['id'], albums[j]['date'], this.access_token);\n            tracks = tracks.concat(new_tracks)\n        }\n        tracks = removeDuplicateSongs(tracks, this.state.remixes);\n\n        tracks.sort(function(first, second) {\n            return (second['date'] + second['order'] * 0.01) - (first['date'] + first['order'] * 0.01)\n        });\n\n        this.setState({count: \"There are \" + tracks.length + \" songs.\"});\n        this.setState({copy_value: createSingleList(tracks, 'uri')});\n        this.setState({message: createSingleList(tracks, 'name')});\n    }\n\n    async get_artist(artist) {\n        console.log(artist);\n        if (this.access_token === \"\")\n            await this.get_access();\n        artist = encodeURIComponent(artist.trim());\n        let artists = await formQuery(\"GET\", this.access_token, \"https://api.spotify.com/v1/search\", \"?q=\" + artist + \"&type=artist\");\n        let artist_id = artists['artists']['items'][0]['id'];\n        this.get_tracks(artist_id)\n    }\n\n    async get_access() {\n        let auth = 'Basic ' + process.env.REACT_APP_AUTH + '=';\n        const pre_request = {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': auth,\n            }\n        };\n        pre_request.body = \"grant_type=client_credentials\";\n        let access_token = \"\";\n        await fetch('https://accounts.spotify.com/api/token',\n            pre_request).then((response) => response.json()).then((responseData) => {access_token=responseData['access_token']});\n        this.access_token = access_token;\n    }\n\n    async get_song() {\n        if (this.access_token === \"\")\n            await this.get_access();\n        let resp = await formQuery('GET', this.access_token, 'https://api.spotify.com/v1/search', '?q=illenium&type=artist');\n        this.setState({message: resp})\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div>{ this.state.count } </div>\n                <Form>\n                    <Form.Group controlId=\"formArtistName\">\n                        <Form.Label>Artist Name</Form.Label>\n                        <Form.Control type=\"text\" id=\"artist_id\"\n                                      onChange={()=>{this.artist = document.getElementById('artist_id').value}}\n                                      placeholder=\"Enter artist name\" />\n                        <Form.Text className=\"text-muted\">\n                            We currently select the top artist available with that name.\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group controlId=\"albums_included\">\n                        <Form.Check type=\"checkbox\" label=\"Include albums\"\n                                    name=\"albums_incl\"\n                                    checked={this.state.albums_incl}\n                                    onChange={this.handleInputChange}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"singles_included\">\n                        <Form.Check type=\"checkbox\" label=\"Include singles\"\n                                    name=\"singles_incl\"\n                                    checked={this.state.singles_incl}\n                                    onChange={this.handleInputChange}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"appears_on_included\">\n                        <Form.Check type=\"checkbox\" label=\"Include songs they appear on\"\n                                    name=\"appears_on\"\n                                    checked={this.state.appears_on}\n                                    onChange={this.handleInputChange}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"compilations_included\">\n                        <Form.Check type=\"checkbox\" label=\"Include compilations\"\n                                    checked={this.state.compilation}\n                                    name=\"compilation\"\n                                    onChange={this.handleInputChange}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"include_remixes\">\n                        <Form.Check type=\"checkbox\" label=\"Include remixes\"\n                                    name=\"remixes\"\n                                    checked={this.state.remixes}\n                                    onChange={this.handleInputChange}/>\n                    </Form.Group>\n                    <Button variant=\"primary\" onClick={()=> this.get_artist(this.artist)}>\n                        Submit\n                    </Button>\n                </Form>\n                <CopyToClipboard text={this.state.copy_value}>\n                    <button>Copy to clipboard with button, paste into a new album!</button>\n                </CopyToClipboard>\n                <div>{ this.state.message } </div>\n            </div>\n        )\n    }\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport { SpotifyAPI } from './SpotifyComponents'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n      <div>\n        <SpotifyAPI>temp</SpotifyAPI>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}