{"version":3,"sources":["SpotifyComponents.js","App.js","serviceWorker.js","index.js"],"names":["formQuery","type","auth","url","query","a","pre_request","method","headers","q_response","fetch","then","response","json","responseData","console","log","getTracks","tracks","i","length","push","toString","createCopyList","data","string","SpotifyAPI","props","access_token","state","message","id","this","get_access","new_tracks","setState","body","resp","Button","style","margin","onClick","Content","get_tracks","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4460b3ee.chunk.js","sourcesContent":["import React from 'react';\nimport {Button} from 'semantic-ui-react';\n\nasync function formQuery(type, auth, url, query) {\n    const pre_request = {\n        method: type,\n        headers: {'Authorization': 'Bearer ' + auth, 'Content-Type': 'application/json'}\n    };\n    let q_response = \"\";\n    await fetch(url + query, pre_request).then((response) => response.json()).then((responseData) => q_response=responseData);\n    console.log(q_response);\n    return q_response;\n}\n\nasync function getTracks(type, auth, url, query) {\n    const pre_request = {\n        method: type,\n        headers: {'Authorization': 'Bearer ' + auth, 'Content-Type': 'application/json'}\n    };\n    let q_response = \"\";\n    await fetch(url + query, pre_request).then((response) => response.json()).then((responseData) => q_response=responseData['items']);\n    console.log(q_response);\n    console.log(typeof(q_response));\n    console.log(q_response[0]);\n    let tracks = [];\n    for (let i = 0; i < q_response.length; i++) {\n        tracks.push({'link': q_response[i.toString()]['external_urls']['spotify'], 'date': q_response[i]['release_date']});\n    }\n    return tracks;\n}\n\nfunction createCopyList(data) {\n    let string = \"\";\n    for (let track of data) {\n        string += track['link'];\n    }\n    return string;\n}\n\nexport class SpotifyAPI extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.access_token = \"\";\n        this.state = {\n            message: 'Default content'\n        }\n    }\n\n    async get_tracks(id) {\n        if (this.access_token === \"\")\n            await this.get_access();\n        let i = 0;\n        let tracks = await getTracks(\"GET\", this.access_token, \"https://api.spotify.com/v1/artists/\" + id + \"/albums\", \"?offset=0&limit=50&include_groups=album,single,appears_on,compilation&market=US\");\n        console.log(\"This is the number of tracks: \" + tracks.length);\n        while (tracks.length / (i + 1) === 50) {\n            let new_tracks = await getTracks(\"GET\", this.access_token, \"https://api.spotify.com/v1/artists/\" + id + \"/albums\", \"?offset=\" + i + \"&limit=50&include_groups=album,single,appears_on,compilation&market=US\");\n            tracks.push(new_tracks)\n        }\n        this.setState({message: createCopyList(tracks)});\n    }\n\n    async get_access() {\n        let auth = 'Basic ' + process.env.REACT_APP_AUTH + '=';\n        const pre_request = {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': auth,\n            }\n        };\n        pre_request.body = \"grant_type=client_credentials\";\n        let access_token = \"\";\n        await fetch('https://accounts.spotify.com/api/token', pre_request).then((response) => response.json()).then((responseData) => {access_token=responseData['access_token']});\n        this.access_token = access_token;\n    }\n\n    async get_song() {\n        if (this.access_token === \"\")\n            await this.get_access();\n        let resp = await formQuery('GET', this.access_token, 'https://api.spotify.com/v1/search', '?q=illenium&type=artist');\n        this.setState({message: resp})\n    }\n\n    render() {\n        return (\n            <div>\n            <Button style={{margin: '2% 10% 2% 10%'}} onClick={() => {\n                this.get_access()\n            }}>\n                <Button.Content>Send Request</Button.Content>\n            </Button>\n                <Button style={{margin: '2% 10% 2% 10%'}} onClick={() => {\n                    this.get_tracks(\"45eNHdiiabvmbp4erw26rg\")\n                }}>\n                    <Button.Content>Send Request</Button.Content>\n                </Button>\n                <div>{ this.state.message } </div>\n            </div>\n        )\n    }\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport { SpotifyAPI } from './SpotifyComponents'\n\nfunction App() {\n  return (\n      <div>\n        <SpotifyAPI>temp</SpotifyAPI>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}